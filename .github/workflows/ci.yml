name: ci # Name of this GitHub Actions workflow
on: # When this workflow should run
  push:
    branches: ["main"] # only when pushing to main

env:
  IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/liatrio-exercise # Docker Hub image repo to use
  TAG: run-${{ github.run_number }}   # Unique image tag per workflow run

jobs:
  build-verify-push: # build, test locally, then push
    runs-on: ubuntu-latest # Use GitHubâ€™s Ubuntu runner
    steps:
      - uses: actions/checkout@v4  # Pull the repo code onto the runner

      # 1) Build the image and load it locally so we can run tests against it
      - name: Build (load for verification)
        uses: docker/build-push-action@v6
        with:
          load: true # Load the image into Docker on this VM
          tags: ${{ env.IMAGE }}:verify #Tag it :verify for the next step

      # 2) Start the container on host:80 (mapped to the app's 8080) so the verifier can hit http://localhost/
      - name: Start container on port 80 
        run: |
          docker run -d --rm --name app -p 80:8080 ${{ env.IMAGE }}:verify 
          for i in {1..15}; do curl -fsS http://localhost/ >/dev/null && break || sleep 1; done
        # Map host 80 -> container 8080
        # Wait until ready check. up to 15 seconds (1 attempt per second)

      # 3) Run Liatrio's tests (they default to hitting http://localhost:80)
      - uses: liatrio/github-actions/apprentice-action@0b41561cca6822cc8d880fe0e49e7807a41fdf91

      - name: Stop container # Clean up the test container even if tests fail
      - if: always()
        run: docker rm -f app

      # 4) Log in and push two tags to Docker Hub: :latest and our unique run tag
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }} #Docker Hub username (from repo secrets)
          password: ${{ secrets.DOCKERHUB_TOKEN }} #Docker Hub access token (from repo secrets)

      - name: Build and push (latest + unique) # Build again and push to Docker Hub
        uses: docker/build-push-action@v6
        with:
          push: true # Actually push to the registry
          tags: | # Publish two tags: 1) latest, newest build 2) exact build for this run, unique
            ${{ env.IMAGE }}:latest 1) 
            ${{ env.IMAGE }}:${{ env.TAG }}

  deploy: # deploy to Cloud Run (after build passes)
    needs: build-verify-push # Only run if the first job succeeded
    runs-on: ubuntu-latest
    steps:
    # Authenticate to Google Cloud using the service account JSON in secrets
      - name: Auth to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup gcloud # Install and configure the gcloud CLI
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy to Cloud Run # Ship the exact versioned image we just built
        run: |
          gcloud run deploy ${{ vars.CLOUD_RUN_SERVICE }} \
            --image="${{ env.IMAGE }}:${{ env.TAG }}" \
            --region="${{ vars.GCP_REGION }}" \
            --project="${{ vars.GCP_PROJECT_ID }}" \
            --platform=managed \
            --allow-unauthenticated
